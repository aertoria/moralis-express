export declare const operations: (import("@moralisweb3/common-core").Operation<import("./evmStreams").AddAddressEvmRequest, {
    id: string;
    address: string | string[];
}, {
    address: import("@moralisweb3/common-evm-utils").EvmAddress | import("@moralisweb3/common-evm-utils").EvmAddress[] | undefined;
    streamId: string;
}, {
    streamId: string;
    address: string & (string | undefined)[];
}> | import("@moralisweb3/common-core").PaginatedOperation<import("./evmStreams").GetStreamsEvmRequest, {
    cursor: string | undefined;
    limit: number;
}, import("..").EvmStream[], {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}[]> | import("@moralisweb3/common-core").Operation<import("./evmStreams").GetStreamEvmRequest, {
    id: string;
}, import("..").EvmStream, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}> | import("@moralisweb3/common-core").Operation<import("./evmStreams").CreateStreamEvmRequest, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0: string[] | null | undefined;
    allAddresses: boolean | undefined;
    includeNativeTxs: boolean | undefined;
    includeContractLogs: boolean | undefined;
    includeInternalTxs: boolean | undefined;
    chainIds: ("0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1")[];
    abi: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    demo: boolean | undefined;
    triggers: import("..").StreamTriggerJSON[] | undefined;
}, import("..").EvmStream, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}> | import("@moralisweb3/common-core").PaginatedOperation<import("./evmStreams").GetAddressesEvmRequest, {
    id: string;
    limit: number | undefined;
    cursor: string | undefined;
}, {
    address: import("@moralisweb3/common-evm-utils").EvmAddress | undefined;
}[], {
    address: string;
}[]> | import("@moralisweb3/common-core").Operation<import("./evmStreams").UpdateStreamEvmRequest, {
    id: string;
    webhookUrl: string | undefined;
    description: string | undefined;
    tag: string | undefined;
    topic0: string[] | null | undefined;
    allAddresses: boolean | undefined;
    includeNativeTxs: boolean | undefined;
    includeContractLogs: boolean | undefined;
    includeInternalTxs: boolean | undefined;
    chainIds: ("0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d" | "0xa4B1")[];
    abi: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    demo: boolean | undefined;
    triggers: import("..").StreamTriggerJSON[] | undefined;
}, import("..").EvmStream, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}> | import("@moralisweb3/common-core").Operation<import("./evmStreams").UpdateStreamStatusEvmRequest, {
    id: string;
    status: import("@moralisweb3/common-core").Camelize<"active" | "paused" | "error" | "terminated">;
}, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}, {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}> | import("@moralisweb3/common-core").PaginatedOperation<import("./history").GetHistoryRequest, import("./history").GetHistoryRequest, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}[], {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}[]> | import("@moralisweb3/common-core").Operation<import("./history").ReplayHistoryRequest, {
    streamId: string;
    id: string;
}, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}, {
    id: string;
    date: string;
    payload?: {
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            triggers?: {
                value: unknown;
                name: string;
            }[] | undefined;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
        }[];
        abi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        }[];
        retries: number;
        confirmed: boolean;
        tag: string;
        streamId: string;
    } | undefined;
    tinyPayload: {
        chainId: string;
        confirmed: boolean;
        block: string;
        records: number;
        retries: number;
    };
    errorMessage: string;
    webhookUrl: string;
    streamId: string;
    tag: string;
}> | import("@moralisweb3/common-core").Operation<import("./project").GetSettingsRequest, undefined, {
    region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
}, {
    region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
}> | import("@moralisweb3/common-core").Operation<import("./project").SetSettingsRequest, {
    region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
}, {
    region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
}, {
    region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
}> | import("@moralisweb3/common-core").Operation<import("./stats").GetStatsByIdRequest, import("./stats").GetStatsByIdRequest, {
    totalWebhooksDelivered: number;
    totalWebhooksFailed: number;
    totalLogsProcessed: number;
    totalTxsProcessed: number;
    totalTxsInternalProcessed: number;
    streams?: {
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streamId: string;
    }[] | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}, {
    totalWebhooksDelivered: number;
    totalWebhooksFailed: number;
    totalLogsProcessed: number;
    totalTxsProcessed: number;
    totalTxsInternalProcessed: number;
    streams?: {
        totalWebhooksDelivered: number;
        totalWebhooksFailed: number;
        totalLogsProcessed: number;
        totalTxsProcessed: number;
        totalTxsInternalProcessed: number;
        streamId: string;
    }[] | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}>)[];
//# sourceMappingURL=operations.d.ts.map