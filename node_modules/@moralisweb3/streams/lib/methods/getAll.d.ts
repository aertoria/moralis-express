import Core from '@moralisweb3/common-core';
import { GetStreamsEvmRequest } from '@moralisweb3/common-streams-utils';
export interface GetStreamsEvmOptions extends GetStreamsEvmRequest {
    networkType?: 'evm';
}
export type GetStreamsOptions = GetStreamsEvmOptions;
export declare const makeGetStreams: (core: Core, baseUrl: string) => ({ networkType, ...options }: GetStreamsOptions) => Promise<import("@moralisweb3/common-core").PaginatedResponseAdapter<import("@moralisweb3/common-streams-utils").EvmStream[], {
    webhookUrl: string;
    description: string;
    tag: string;
    topic0?: string[] | null | undefined;
    allAddresses?: boolean | undefined;
    includeNativeTxs?: boolean | undefined;
    includeContractLogs?: boolean | undefined;
    includeInternalTxs?: boolean | undefined;
    getNativeBalances?: {
        selectors: string[];
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer" | "internalTx";
    }[] | undefined;
    abi?: {
        anonymous?: boolean | undefined;
        constant?: boolean | undefined;
        inputs?: {
            name: string;
            type: string;
            indexed?: boolean | undefined;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        outputs?: {
            name: string;
            type: string;
            components?: any[] | undefined;
            internalType?: string | undefined;
        }[] | undefined;
        payable?: boolean | undefined;
        stateMutability?: string | undefined;
        type: string;
        gas?: number | undefined;
    }[] | null | undefined;
    advancedOptions?: {
        topic0: string;
        filter?: {
            [key: string]: unknown;
        } | undefined;
        includeNativeTxs?: boolean | undefined;
    }[] | null | undefined;
    chainIds: string[];
    demo?: boolean | undefined;
    triggers?: {
        type: "tx" | "log" | "erc20transfer" | "erc20approval" | "nfttransfer";
        contractAddress: string;
        inputs?: (string & unknown[])[] | undefined;
        functionAbi: {
            anonymous?: boolean | undefined;
            constant?: boolean | undefined;
            inputs?: {
                name: string;
                type: string;
                indexed?: boolean | undefined;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            name?: string | undefined;
            outputs?: {
                name: string;
                type: string;
                components?: any[] | undefined;
                internalType?: string | undefined;
            }[] | undefined;
            payable?: boolean | undefined;
            stateMutability?: string | undefined;
            type: string;
            gas?: number | undefined;
        };
        topic0?: string | undefined;
        callFrom?: string | undefined;
    }[] | null | undefined;
    id: string;
    status: "active" | "paused" | "error" | "terminated";
    statusMessage: string;
}[]>>;
//# sourceMappingURL=getAll.d.ts.map