"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUpdateStreamStatus = void 0;
var api_utils_1 = require("@moralisweb3/api-utils");
var common_streams_utils_1 = require("@moralisweb3/common-streams-utils");
var IncorrectNetworkError_1 = require("../utils/IncorrectNetworkError");
var StreamNetwork_1 = require("../utils/StreamNetwork");
var makeUpdateStreamStatus = function (core, baseUrl) {
    var fetcher = new api_utils_1.OperationResolver(common_streams_utils_1.updateStreamStatusEvmOperation, baseUrl, core).fetch;
    return function (_a) {
        var networkType = _a.networkType, options = __rest(_a, ["networkType"]);
        switch (networkType) {
            case StreamNetwork_1.StreamNetwork.EVM:
                return fetcher(__assign({}, options));
            default:
                if (networkType === undefined) {
                    return fetcher(__assign({}, options));
                }
                throw new IncorrectNetworkError_1.IncorrectNetworkError(networkType);
        }
    };
};
exports.makeUpdateStreamStatus = makeUpdateStreamStatus;
//# sourceMappingURL=updateStatus.js.map