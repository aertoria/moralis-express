import { SolAddressish, SolNetworkish } from '@moralisweb3/common-sol-utils';
import Core from '@moralisweb3/common-core';
import { EvmAddressish, EvmChainish } from '@moralisweb3/common-evm-utils';
export interface RequestMessageEvmOptions {
    networkType?: 'evm';
    /**
     * @deprecared use networkType instead
     */
    network?: 'evm';
    domain: string;
    chain: EvmChainish;
    address: EvmAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
export interface RequestMessageSolOptions {
    networkType: 'solana';
    /**
     * @deprecared use networkType instead
     */
    network?: 'solana';
    domain: string;
    solNetwork: SolNetworkish;
    address: SolAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
export type RequestMessageOptions = RequestMessageEvmOptions | RequestMessageSolOptions;
export declare const makeRequestMessage: (core: Core) => (options: RequestMessageOptions) => Promise<import("@moralisweb3/common-core").ResponseAdapter<{
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}>>;
//# sourceMappingURL=requestMessage.d.ts.map